/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { Entity2 } from "./Entity2";
import { Entity2CountArgs } from "./Entity2CountArgs";
import { Entity2FindManyArgs } from "./Entity2FindManyArgs";
import { Entity2FindUniqueArgs } from "./Entity2FindUniqueArgs";
import { DeleteEntity2Args } from "./DeleteEntity2Args";
import { Entity2Service } from "../entity2.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Entity2)
export class Entity2ResolverBase {
  constructor(
    protected readonly service: Entity2Service,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Entity2",
    action: "read",
    possession: "any",
  })
  async _entity2sMeta(
    @graphql.Args() args: Entity2CountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Entity2])
  @nestAccessControl.UseRoles({
    resource: "Entity2",
    action: "read",
    possession: "any",
  })
  async entity2s(
    @graphql.Args() args: Entity2FindManyArgs
  ): Promise<Entity2[]> {
    return this.service.entity2s(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Entity2, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Entity2",
    action: "read",
    possession: "own",
  })
  async entity2(
    @graphql.Args() args: Entity2FindUniqueArgs
  ): Promise<Entity2 | null> {
    const result = await this.service.entity2(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Entity2)
  @nestAccessControl.UseRoles({
    resource: "Entity2",
    action: "delete",
    possession: "any",
  })
  async deleteEntity2(
    @graphql.Args() args: DeleteEntity2Args
  ): Promise<Entity2 | null> {
    try {
      return await this.service.deleteEntity2(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
